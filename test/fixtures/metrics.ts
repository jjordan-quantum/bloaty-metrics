import {MetricsCounter} from "../../src/entitiy/MetricsCounter";
import {TEN_MINUTE_MS, TWENTY_FOUR_HOUR_MS} from "../../src/utils/constants";

const now = Date.now();

/**
 *  - includes the last 2 24 hr records
 *  - includes a batch of 10 min records (not all 144 for the last 24 hours though)
 *  - id's are in reverse chronological order - we ignore these for the save's anyways -> auto-generated by sequence
 */

export const metrics: MetricsCounter[] = [{
  id: 0,
  metricName: 'sample',
  interval: TWENTY_FOUR_HOUR_MS,
  count: 29523,
  intervalEndTimestampMs: String(now - TWENTY_FOUR_HOUR_MS),
}, {
  id: 1,
  metricName: 'sample',
  interval: TWENTY_FOUR_HOUR_MS,
  count: 34521,
  intervalEndTimestampMs: String(now - 2 * TWENTY_FOUR_HOUR_MS),
}, {
  id: 2,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 123,
  intervalEndTimestampMs: String(now - TEN_MINUTE_MS),
}, {
  id: 3,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 231,
  intervalEndTimestampMs: String(now - 2 * TEN_MINUTE_MS),
}, {
  id: 4,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 23,
  intervalEndTimestampMs: String(now - 3 * TEN_MINUTE_MS),
}, {
  id: 5,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 1123,
  intervalEndTimestampMs: String(now - 4 * TEN_MINUTE_MS),
}, {
  id: 6,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 122,
  intervalEndTimestampMs: String(now - 6 * TEN_MINUTE_MS),
}, {
  id: 7,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 142,
  intervalEndTimestampMs: String(now - 7 * TEN_MINUTE_MS),
}, {
  id: 8,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 13,
  intervalEndTimestampMs: String(now - 8 * TEN_MINUTE_MS),
}, {
  id: 9,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 543,
  intervalEndTimestampMs: String(now - 9 * TEN_MINUTE_MS),
}, {
  id: 10,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 3254,
  intervalEndTimestampMs: String(now - 10 * TEN_MINUTE_MS),
}, {
  id: 11,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 65,
  intervalEndTimestampMs: String(now - 11 * TEN_MINUTE_MS),
}, {
  id: 12,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 87,
  intervalEndTimestampMs: String(now - 12 * TEN_MINUTE_MS),
}, {
  id: 13,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 345,
  intervalEndTimestampMs: String(now - 13 * TEN_MINUTE_MS),
}, {
  id: 14,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 765,
  intervalEndTimestampMs: String(now - 14 * TEN_MINUTE_MS),
}, {
  id: 15,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 765,
  intervalEndTimestampMs: String(now - 15 * TEN_MINUTE_MS),
}, {
  id: 16,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 534,
  intervalEndTimestampMs: String(now - 16 * TEN_MINUTE_MS),
}, {
  id: 17,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 547,
  intervalEndTimestampMs: String(now - 17 * TEN_MINUTE_MS),
}, {
  id: 18,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 876,
  intervalEndTimestampMs: String(now - 18 * TEN_MINUTE_MS),
}, {
  id: 19,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 23,
  intervalEndTimestampMs: String(now - 19 * TEN_MINUTE_MS),
}, {
  id: 20,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 4567,
  intervalEndTimestampMs: String(now - 20 * TEN_MINUTE_MS),
}, {
  id: 21,
  metricName: 'sample',
  interval: TEN_MINUTE_MS,
  count: 1323,
  intervalEndTimestampMs: String(now - 21 * TEN_MINUTE_MS),
}, {
  id: 22,
  metricName: 'sample',
  interval: 2 * TEN_MINUTE_MS,  // assume this one was different interval (20 min) - should still be summed
  count: 432,
  intervalEndTimestampMs: String(now - 22 * TEN_MINUTE_MS),
}];
